<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PostgreSql on 数据库的路上</title>
    <link>http://localhost:1313/categories/postgresql/</link>
    <description>Recent content in PostgreSql on 数据库的路上</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 16 May 2025 20:44:59 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Postgresql 源码研究之基础备份工具pg_basebackup</title>
      <link>http://localhost:1313/posts/db/postgresql/postgresql-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7pg_basebackup/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/postgresql-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7pg_basebackup/</guid>
      <description>&lt;h2 id=&#34;pg_basebackup介绍&#34;&gt;pg_basebackup介绍&lt;/h2&gt;&#xA;&lt;p&gt;pg_basebackup 是 PostgreSQL 内置的 &lt;strong&gt;物理备份工具&lt;/strong&gt;，用于创建数据库集群的 &lt;strong&gt;一致基础备份&lt;/strong&gt;。它支持 &lt;strong&gt;在线热备份&lt;/strong&gt;（备份时数据库可正常读写），是实现高可用性（如流复制）和灾难恢复的核心工具之一&lt;/p&gt;&#xA;&lt;h3 id=&#34;main函数介绍&#34;&gt;main函数介绍&lt;/h3&gt;&#xA;&lt;p&gt;根据代码分析，&lt;code&gt;main()&lt;/code&gt;函数在pg_basebackup.c中主要完成了以下逻辑步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;初始化处理&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解析命令行参数&lt;/li&gt;&#xA;&lt;li&gt;设置信号处理&lt;/li&gt;&#xA;&lt;li&gt;初始化全局变量和数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;连接数据库&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;建立与PostgreSQL服务器的连接&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conn = GetConnection();&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;验证服务器版本兼容性&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;备份准备&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;创建或清理目标目录&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;verify_dir_is_empty_or_create(basedir, &amp;amp;made_new_pgdata, &amp;amp;found_existing_pgdata);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;处理表空间映射&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置WAL日志目录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;执行备份&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据参数选择备份格式(plain/tar)&lt;/li&gt;&#xA;&lt;li&gt;启动后台WAL流接收进程&lt;/li&gt;&#xA;&lt;li&gt;通过流复制协议接收基础备份数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关键函数调&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;BaseBackup()&lt;/code&gt; - 核心备份逻辑&lt;/p&gt;&#xA;&lt;p&gt;StartLogStreamer()` - 启动WAL流接收&lt;/p&gt;&#xA;&lt;p&gt;cleanup_directories_atexit()` - 退出时清理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;全量备份&#34;&gt;全量备份&lt;/h3&gt;&#xA;&lt;p&gt;不指定增量备份情况下,默认是全量备份.&lt;/p&gt;&#xA;&lt;h4 id=&#34;主要步骤&#34;&gt;主要步骤&lt;/h4&gt;&#xA;&lt;h5 id=&#34;client-端-basebackup&#34;&gt;client 端 BaseBackup();&lt;/h5&gt;&#xA;&lt;p&gt;▶  通过libpq 发送&amp;quot;BASE_BACKUP&amp;quot; 命令给server&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/29/29WUvoMy6VFPQ5p.png&#34; alt=&#34;image-20250429161709054&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;▶   对于采用流复制备份单独启动一个进程接收wal日志（数据库在备份期间还存在并发写入的情况）&#x9;&#xA;StartLogStreamer(xlogstart..)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会使用临时物理复制槽位，保证wal在备份期间不丢失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;zhou=# select slot_name from pg_replication_slots ;&#xA;    slot_name      &#xA;---------------------&#xA;pg_basebackup_19476&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;▶ 循环接收服务端发送过来的备份数据直到结束&#xA;ReceiveArchiveStream(conn, client_compress);&lt;/p&gt;</description>
    </item>
    <item>
      <title>从数据库源码角度解析事务的ACID四大特性</title>
      <link>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8B%E5%8A%A1%E7%9A%84acid%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8B%E5%8A%A1%E7%9A%84acid%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;事务的ACID特性（原子性、一致性、隔离性、持久性）是关系型数据库的核心基石。本文将以&lt;strong&gt;PostgreSQL&lt;/strong&gt;为切入点，通过源码分析和调试示例，深入解读ACID特性在数据库底层的实现机制。我们将以PostgreSQL数据库为例，结合具体的SQL语句和调试过程，带您一窥事务背后的神秘世界。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一原子性atomicity要么全成功要么全失败&#34;&gt;一、原子性（Atomicity）：要么全成功，要么全失败&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-原理概述&#34;&gt;1.1 原理概述&lt;/h3&gt;&#xA;&lt;p&gt;原子性要求事务中的所有操作要么全部成功提交，要么全部回滚。PostgreSQL通过预写式日志（WAL, Write-Ahead Logging）和回滚段（Undo Log）实现这一特性。事务提交前，所有修改必须先写入WAL日志，确保在崩溃后能通过日志恢复。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-源码实现&#34;&gt;1.2 源码实现&lt;/h3&gt;&#xA;&lt;p&gt;关键文件：&lt;code&gt;src/backend/access/transam/xact.c&lt;/code&gt;&lt;br&gt;&#xA;核心函数：&lt;code&gt;CommitTransaction()&lt;/code&gt; 和 &lt;code&gt;AbortTransaction()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例sql&#34;&gt;示例SQL：&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; accounts (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id SERIAL &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    balance NUMERIC(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 初始化两个账户，初始余额均为 500&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; accounts (balance) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; accounts (balance) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 开启事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 更新账户余额（模拟转账）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 提交事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COMMIT&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--回滚事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROLLBACK&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;调试过程&#34;&gt;调试过程：&lt;/h4&gt;&#xA;&lt;h5 id=&#34;要么全成功&#34;&gt;要么全成功&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在&lt;code&gt;xact.c&lt;/code&gt;中设置断点：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 源码位置：src/backend/access/transam/xact.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommitTransaction&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 提交事务前，将所有修改写入WAL日志&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RecordTransactionCommit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;代码运行到提交事务阶段&#xA;&lt;img src=&#34;https://s2.loli.net/2025/06/13/PCfybzAOqBUJ1d9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>从源码看 postgresql 共享内存使用</title>
      <link>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-postgresql-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-postgresql-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;共享内存实现方式&#34;&gt;共享内存实现方式&lt;/h2&gt;&#xA;&lt;p&gt;源码中可见Postgres 共享内存实现方式有 3 中，默认使用的 MMAP 内存映射方式&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef enum&#xA;{&#xA;&#x9;SHMEM_TYPE_WINDOWS,&#xA;&#x9;SHMEM_TYPE_SYSV,&#xA;&#x9;SHMEM_TYPE_MMAP,&#xA;}&#x9;PGShmemType;&#xA;&#xA;#define DEFAULT_SHARED_MEMORY_TYPE SHMEM_TYPE_MMAP&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;共享内存组成部分和大小&#34;&gt;共享内存组成部分和大小&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源码文件 backend/storage/ipc/ipci.c&#xA;源码函数 CalculateShmemSize(int *num_semaphores)&#xA;&#xA;整体组成部分有下面这么多，其中最大的部分是BufferShmemSize，就是数据库参数shared_buffers 参数对应的部分。&#xA;&#xA;  size = add_size(size, PGSemaphoreShmemSize(numSemas));&#xA;&#x9;size = add_size(size, SpinlockSemaSize());&#xA;&#x9;size = add_size(size, hash_estimate_size(SHMEM_INDEX_SIZE,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; sizeof(ShmemIndexEnt)));&#xA;&#x9;size = add_size(size, dsm_estimate_size());&#xA;&#x9;size = add_size(size, DSMRegistryShmemSize());&#xA;&#x9;size = add_size(size, BufferShmemSize());&#xA;&#x9;size = add_size(size, LockShmemSize());&#xA;&#x9;size = add_size(size, PredicateLockShmemSize());&#xA;&#x9;size = add_size(size, ProcGlobalShmemSize());&#xA;&#x9;size = add_size(size, XLogPrefetchShmemSize());&#xA;&#x9;size = add_size(size, VarsupShmemSize());&#xA;&#x9;size = add_size(size, XLOGShmemSize());&#xA;&#x9;size = add_size(size, XLogRecoveryShmemSize());&#xA;&#x9;size = add_size(size, CLOGShmemSize());&#xA;&#x9;size = add_size(size, CommitTsShmemSize());&#xA;&#x9;size = add_size(size, SUBTRANSShmemSize());&#xA;&#x9;size = add_size(size, TwoPhaseShmemSize());&#xA;&#x9;size = add_size(size, BackgroundWorkerShmemSize());&#xA;&#x9;size = add_size(size, MultiXactShmemSize());&#xA;&#x9;size = add_size(size, LWLockShmemSize());&#xA;&#x9;size = add_size(size, ProcArrayShmemSize());&#xA;&#x9;size = add_size(size, BackendStatusShmemSize());&#xA;&#x9;size = add_size(size, SInvalShmemSize());&#xA;&#x9;size = add_size(size, PMSignalShmemSize());&#xA;&#x9;size = add_size(size, ProcSignalShmemSize());&#xA;&#x9;size = add_size(size, CheckpointerShmemSize());&#xA;&#x9;size = add_size(size, AutoVacuumShmemSize());&#xA;&#x9;size = add_size(size, ReplicationSlotsShmemSize());&#xA;&#x9;size = add_size(size, ReplicationOriginShmemSize());&#xA;&#x9;size = add_size(size, WalSndShmemSize());&#xA;&#x9;size = add_size(size, WalRcvShmemSize());&#xA;&#x9;size = add_size(size, WalSummarizerShmemSize());&#xA;&#x9;size = add_size(size, PgArchShmemSize());&#xA;&#x9;size = add_size(size, ApplyLauncherShmemSize());&#xA;&#x9;size = add_size(size, BTreeShmemSize());&#xA;&#x9;size = add_size(size, SyncScanShmemSize());&#xA;&#x9;size = add_size(size, AsyncShmemSize());&#xA;&#x9;size = add_size(size, StatsShmemSize());&#xA;&#x9;size = add_size(size, WaitEventExtensionShmemSize());&#xA;&#x9;size = add_size(size, InjectionPointShmemSize());&#xA;&#x9;size = add_size(size, SlotSyncShmemSize());&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;共享内存创建&#34;&gt;共享内存创建&lt;/h2&gt;&#xA;&lt;p&gt;在刚创建初期，共享内存结构很简单，如下图。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
