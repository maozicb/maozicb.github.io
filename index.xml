<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库的路上</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 数据库的路上</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Jun 2025 20:44:59 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>借助GDB python 模块调试 OpenGauss</title>
      <link>http://localhost:1313/posts/db/opengauss/%E5%80%9F%E5%8A%A9gdb-python-%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95-opengauss/</link>
      <pubDate>Tue, 17 Jun 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/%E5%80%9F%E5%8A%A9gdb-python-%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95-opengauss/</guid>
      <description>&lt;p&gt;OpenGauss是一个单进程多线程的架构，空闲情况下线程已经有几十个了，如何通过线程名快速找到线程id 对线程的调试很有比较。gdb 可以通过python 扩展实现这个功能&lt;/p&gt;&#xA;&lt;h3 id=&#34;环境信息&#34;&gt;环境信息&lt;/h3&gt;&#xA;&lt;p&gt;操作系统centos7.6&lt;/p&gt;&#xA;&lt;h3 id=&#34;安装依赖&#34;&gt;安装依赖&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum groupinstall &amp;#34;Development Tools&amp;#34;&#xA;sudo yum install python3-devel flex bison ncurses-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;编译gdb&#34;&gt;编译gdb&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./configure --prefix /usr/local/gdb13 --with-python=$(which python3)&#xA;&#xA;make &amp;amp;&amp;amp;make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;准备python-代码&#34;&gt;准备python 代码&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find_threads_by_name&lt;/span&gt;(name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 只执行一次 info thread 命令获取所有线程信息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    thread_info &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;info thread&amp;#34;&lt;/span&gt;, to_string&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; thread_info&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    found_ids &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; name &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; line:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            thread_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parts[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()  &lt;span style=&#34;color:#75715e&#34;&gt;# 去除可能的 * 符号&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; thread_id&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit() &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; thread_id &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; found_ids:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Found thread ID: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;thread_id&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; with name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                found_ids&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(thread_id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义一个 GDB 命令&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FindThreadsByName&lt;/span&gt;(gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Command):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super(FindThreadsByName, self)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__init__(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;find-threads-by-name&amp;#34;&lt;/span&gt;, gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COMMAND_USER)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;(self, arg, from_tty):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        argv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;string_to_argv(arg)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(argv) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: find-threads-by-name &amp;lt;thread_name&amp;gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        find_threads_by_name(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 注册命令&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FindThreadsByName()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;代码解释&#34;&gt;代码解释&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;find_threads_by_name&lt;/code&gt; 函数&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenGauss 备份恢复实战之gs_probackup工具</title>
      <link>http://localhost:1313/posts/db/opengauss/opengauss-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E5%AE%9E%E6%88%98%E4%B9%8Bgs_probackup%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 16 Jun 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/opengauss-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E5%AE%9E%E6%88%98%E4%B9%8Bgs_probackup%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h2 id=&#34;全量备份&#34;&gt;全量备份&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;确定存放备份文件的路径，初始化备份路径&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gs_probackup init -B backup-path &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;在备份路径下添加一个备份实例，一个实例对应一个文件夹&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gs_probackup add-instance -B backup-path &#xA;&#xA;[opengauss@node1]$ gs_probackup add-instance -B /home/opengauss/backup/ --instance instance1&#xA;&#xA;[opengauss@node1]$ ll&#xA;total 0&#xA;drwx------ 2 opengauss dbgrp 31 Apr 27 14:45 instance1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;执行备份&lt;/p&gt;&#xA;&lt;p&gt;先执行全量备份&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gs_probackup backup -B /home/opengauss/backup/ --instance=instance1 -b full &#xA;&#xA;[opengauss@node1 instance1]$ gs_probackup backup -B /home/opengauss/backup/ --instance=instance1 -b full &#xA;INFO: Backup start, gs_probackup version: 2.4.2, instance: instance1, backup ID: SVQLS2, backup mode: FULL, wal mode: STREAM, remote: false, compress-algorithm: none, compress-level: 1&#xA;LOG: Backup destination is initialized&#xA;LOG: This openGauss instance was initialized with data block checksums. Data block corruption will be detected&#xA;LOG: Database backup start&#xA;LOG: started streaming WAL at 0/5C000000 (timeline 1)&#xA;[2025-05-04 20:38:26]: check identify system success                                                &#xA;[2025-05-04 20:38:26]: send START_REPLICATION 0/5C000000 success                                    &#xA;[2025-05-04 20:38:26]: keepalive message is received                                                &#xA;[2025-05-04 20:38:26]: keepalive message is received                                                &#xA;INFO: PGDATA size: 1707MB&#xA;INFO: Start backing up files&#xA;LOG: Creating page header map &amp;#34;/home/opengauss/backup/backups/instance1/SVQLS2/page_header_map&amp;#34;&#xA;[2025-05-04 20:38:31]: keepalive message is received                                                &#xA;Progress: [==================================================] 100% (2726/2726, done_files/total_files). backup file &#xA;INFO: Finish backuping file&#xA;INFO: Data files are transferred, time elapsed: 7s&#xA;INFO: wait for pg_stop_backup()&#xA;INFO: pg_stop backup() successfully executed&#xA;LOG: stop_lsn: 0/5C0001E8&#xA;LOG: Looking for LSN 0/5C0001E8 in segment: 00000001000000000000005C&#xA;LOG: Found WAL segment: /home/opengauss/backup/backups/instance1/SVQLS2/database/pg_xlog/00000001000000000000005C&#xA;LOG: Thread [0]: Opening WAL segment &amp;#34;/home/opengauss/backup/backups/instance1/SVQLS2/database/pg_xlog/00000001000000000000005C&amp;#34;&#xA;LOG: Found LSN: 0/5C0001E8&#xA;LOG: finished streaming WAL at 0/5D000000 (timeline 1)&#xA;LOG: Getting the Recovery Time from WAL&#xA;LOG: Thread [0]: Opening WAL segment &amp;#34;/home/opengauss/backup/backups/instance1/SVQLS2/database/pg_xlog/00000001000000000000005C&amp;#34;&#xA;INFO: Syncing backup files to disk&#xA;Progress: [==================================================] 100% (2726/2726, done_files/total_files). Sync backup file &#xA;INFO: Finish Syncing backup files.&#xA;INFO: Backup files are synced, time elapsed: 1s&#xA;INFO: Validating backup SVQLS2&#xA;INFO: Begin validate file&#xA;Progress: [==================================================] 100% (2728/2728, done_files/total_files). validate file &#xA;INFO: Finish validate file. &#xA;INFO: Backup SVQLS2 data files are valid&#xA;INFO: Backup SVQLS2 resident size: 1724MB&#xA;INFO: Backup SVQLS2 completed&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;查看备份&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenGauss 服务端GBK字符集和Postgresql对比分析</title>
      <link>http://localhost:1313/posts/db/opengauss/opengauss-%E6%9C%8D%E5%8A%A1%E7%AB%AFgbk%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8Cpostgresql%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 16 Jun 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/opengauss-%E6%9C%8D%E5%8A%A1%E7%AB%AFgbk%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8Cpostgresql%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;postgresql-server端不支持gbk字符集&#34;&gt;Postgresql server端不支持GBK字符集&lt;/h2&gt;&#xA;&lt;p&gt;psql创建数据库&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create database gbk with encoding &amp;#39;GBK&amp;#39;;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码调用&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;src/backend/commands/dbcommands.c&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/06/20/nyxuUvHf3dDNkiq.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;通过pg_valid_server_encoding验证编码是否有效&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pg_valid_server_encoding 函数结构图&#xA;&#xA;```mermaid&#xA;graph TD&#xA;    A[pg_valid_server_encoding] --&amp;gt; B[pg_char_to_encoding]&#xA;    B --&amp;gt; C[clean_encoding_name]&#xA;    C --&amp;gt; D[二分查找 pg_encname_tbl]&#xA;    A --&amp;gt; E[PG_VALID_BE_ENCODING 宏]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pg_encname_tbl 是一个数组，里面罗列了所有Postgresql支持的字符集&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;pg_char_to_encoding 通过验证，gbk在整体支持列表里，后面需验证是否支持 server 端字符集&#xA;&lt;img src=&#34;https://s2.loli.net/2025/06/20/uTd8XgL5shwABZ6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;需要使用PG_VALID_BE_ENCODING(enc) 判断 server 端是否支持 gbk&#xA;根据src/include/mb/pg_wchar.h 代码的定义，PG_GBK 只属于 client 支持的范围，server 端不支持。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#x9;/* followings are for client encoding only */&#xA;&#x9;PG_SJIS,&#x9;&#x9;&#x9;&#x9;&#x9;/* Shift JIS (Windows-932) */&#xA;&#x9;PG_BIG5,&#x9;&#x9;&#x9;&#x9;&#x9;/* Big5 (Windows-950) */&#xA;&#x9;PG_GBK,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* GBK (Windows-936) */&#xA;&#x9;PG_UHC,&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* UHC (Windows-949) */&#xA;&#x9;PG_GB18030,&#x9;&#x9;&#x9;&#x9;&#x9;/* GB18030 */&#xA;&#x9;PG_JOHAB,&#x9;&#x9;&#x9;&#x9;&#x9;/* EUC for Korean JOHAB */&#xA;&#x9;PG_SHIFT_JIS_2004,&#x9;&#x9;&#x9;/* Shift-JIS-2004 */&#xA;&#x9;_PG_LAST_ENCODING_&#x9;&#x9;&#x9;/* mark only */&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/06/20/glcRVvM1aDBksi4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>从数据库源码比较 PostgreSql和OpenGauss的启动过程</title>
      <link>http://localhost:1313/posts/db/opengauss/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E6%AF%94%E8%BE%83-postgresql%E5%92%8Copengauss%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 16 Jun 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E6%AF%94%E8%BE%83-postgresql%E5%92%8Copengauss%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;测试环境版本：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Postgresql 17&lt;/li&gt;&#xA;&lt;li&gt;OpenGauss 6.0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;启动命令比较&#34;&gt;启动命令比较&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;数据库&lt;/th&gt;&#xA;          &lt;th&gt;启动命令&lt;/th&gt;&#xA;          &lt;th&gt;起始代码文件&lt;/th&gt;&#xA;          &lt;th&gt;执行启动数据库的命令&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;postgresql&lt;/td&gt;&#xA;          &lt;td&gt;pg_ctl start&lt;/td&gt;&#xA;          &lt;td&gt;pg_ctl.c&lt;/td&gt;&#xA;          &lt;td&gt;通过execl 调用postgres 程序&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;opengaussdb&lt;/td&gt;&#xA;          &lt;td&gt;gs_ctl start&lt;/td&gt;&#xA;          &lt;td&gt;pg_ctl.cpp&lt;/td&gt;&#xA;          &lt;td&gt;通过execl 调用gaussdb  程序&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Postgresql的堆栈和具体代码&#xA;&lt;img src=&#34;https://s2.loli.net/2025/03/24/5SY26Pw8Ki3QrNm.jpg&#34; alt=&#34;Postgresql&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;opengauss的堆栈和具体代码&#xA;&lt;img src=&#34;https://s2.loli.net/2025/03/24/tLIg9EMHokcGKNe.jpg&#34; alt=&#34;opengauss&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据库主进程对比&#34;&gt;数据库主进程对比&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;数据库名&lt;/th&gt;&#xA;          &lt;th&gt;主函数路径&lt;/th&gt;&#xA;          &lt;th&gt;进程名&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Postgresql&lt;/td&gt;&#xA;          &lt;td&gt;src/backend/main/main.c&lt;/td&gt;&#xA;          &lt;td&gt;postgres&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;opengauss&lt;/td&gt;&#xA;          &lt;td&gt;src/gausskernel/process/main/main.cpp&lt;/td&gt;&#xA;          &lt;td&gt;gaussdb&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;opengauss-与-postgresql-的-main-函数比较&#34;&gt;openGauss 与 PostgreSQL 的 main 函数比较&lt;/h3&gt;&#xA;&lt;p&gt;openGauss 和 PostgreSQL 的 main 函数都是数据库系统的入口点，但它们在实现上有一些重要区别。以下是主要比较点：&lt;/p&gt;&#xA;&lt;h4 id=&#34;相似之处&#34;&gt;相似之处&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;基本功能&lt;/strong&gt;：两者都作为数据库系统的入口点，负责初始化环境并分发到不同的运行模式（如 postmaster、单用户模式、引导模式等）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;命令行参数处理&lt;/strong&gt;：都支持类似的命令行参数，如 &lt;code&gt;--help&lt;/code&gt;、&lt;code&gt;--version&lt;/code&gt;、&lt;code&gt;--boot&lt;/code&gt;、&lt;code&gt;--single&lt;/code&gt; 等。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;安全检查&lt;/strong&gt;：都会检查是否以 root 用户运行，并禁止以 root 身份启动数据库。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;本地化设置&lt;/strong&gt;：都会设置区域信息（locale）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;主要差异&#34;&gt;主要差异&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;线程模型 vs 进程模型&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;openGauss 使用线程模型：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;knl_thread_init(MASTER_THREAD);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;t_thrd.fake_session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create_session_context(t_thrd.top_mem_cxt, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;PostgreSQL 使用进程模型，没有线程相关的初始化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;透明大页（THP）禁用&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>企业版OpenGauss安装部署问题记录</title>
      <link>http://localhost:1313/posts/db/opengauss/%E4%BC%81%E4%B8%9A%E7%89%88opengauss%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 16 Jun 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/%E4%BC%81%E4%B8%9A%E7%89%88opengauss%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;h2 id=&#34;环境信息&#34;&gt;环境信息&lt;/h2&gt;&#xA;&lt;p&gt;操作系统： centos7.6&#xA;数据库版本：openGauss-Server-7.0.0-RC1&#xA;数据库架构：1主1备&#xA;安装工具：openGauss-OM&lt;/p&gt;&#xA;&lt;h3 id=&#34;python3-环境准备&#34;&gt;python3 环境准备&lt;/h3&gt;&#xA;&lt;p&gt;安装脚本里需要python3 的环境，需要启用python的 &amp;ndash;enable-shared 功能&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装操作系统依赖包 install -y openssl-devel libffi-devel python3-devel&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;编译python&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; ./configure  --enable-shared &#xD;&#xA; make &#xD;&#xA; make install&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;初始化安装环境-gs_preinstall--u-omm--g-dbgrp--x&#34;&gt;初始化安装环境 ./gs_preinstall -U omm -G dbgrp -X&lt;/h2&gt;&#xA;&lt;h3 id=&#34;错误一gauss-51405--you-need-to-install-softwareexpect&#34;&gt;错误一：[GAUSS-51405] : You need to install software:expect&lt;/h3&gt;&#xA;&lt;p&gt;分析原因是配置互信时需要expect 包&lt;/p&gt;&#xA;&lt;p&gt;[root@main script]# ./gs_preinstall -U omm -G dbgrp -X /root/soft/install.xml&#xA;[GAUSS-51405] : You need to install software:expect&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; yum install expect&#xD;&#xA; &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;错误二importerror-this-module-was-compiled-for-python-36&#34;&gt;错误二：ImportError: this module was compiled for Python 3.6&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@main script]# ./gs_preinstall -U omm -G dbgrp -X /root/soft/install.xml &#xD;&#xA;Traceback (most recent call last):&#xD;&#xA;  File &amp;#34;/root/soft/script/gspylib/threads/SshTool.py&amp;#34;, line 46, in &amp;lt;module&amp;gt;&#xD;&#xA;    import paramiko&#xD;&#xA;  File &amp;#34;/root/soft/script/domain_utils/sql_handler/../../../lib/paramiko/__init__.py&amp;#34;, line 22, in &amp;lt;module&amp;gt;&#xD;&#xA;    from paramiko.transport import SecurityOptions, Transport&#xD;&#xA;  File &amp;#34;/root/soft/script/domain_utils/sql_handler/../../../lib/paramiko/transport.py&amp;#34;, line 89, in &amp;lt;module&amp;gt;&#xD;&#xA;    from paramiko.dsskey import DSSKey&#xD;&#xA;  File &amp;#34;/root/soft/script/domain_utils/sql_handler/../../../lib/paramiko/dsskey.py&amp;#34;, line 37, in &amp;lt;module&amp;gt;&#xD;&#xA;    from paramiko.pkey import PKey&#xD;&#xA;  File &amp;#34;/root/soft/script/domain_utils/sql_handler/../../../lib/paramiko/pkey.py&amp;#34;, line 31, in &amp;lt;module&amp;gt;&#xD;&#xA;    import bcrypt&#xD;&#xA;  File &amp;#34;/root/soft/script/domain_utils/sql_handler/../../../lib/bcrypt/__init__.py&amp;#34;, line 25, in &amp;lt;module&amp;gt;&#xD;&#xA;    from . import _bcrypt  # type: ignore&#xD;&#xA;ImportError: this module was compiled for Python 3.6&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看来python只能用3.6 . 只能重新编译python 3.6&lt;/p&gt;</description>
    </item>
    <item>
      <title>openGauss gs_om 命令源码解读</title>
      <link>http://localhost:1313/posts/opengauss_gs_om%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/opengauss_gs_om%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
      <description>&lt;h1 id=&#34;opengauss-om&#34;&gt;openGauss-OM&lt;/h1&gt;&#xA;&lt;h2 id=&#34;opengauss-om简介&#34;&gt;openGauss-OM简介&lt;/h2&gt;&#xA;&lt;p&gt;openGauss-OM（Operation and Maintenance Tool）是基于Python 开发的 openGauss 数据库的运维工具，主要用于实现数据库的自动化部署、配置管理、监控告警及故障处理等功能，旨在提升数据库运维效率，降低运维复杂度&lt;/p&gt;&#xA;&lt;h2 id=&#34;gs_om-命令工具&#34;&gt;gs_om 命令工具&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;gs_om&lt;/strong&gt; 是 openGauss 数据库运维管理的核心命令行工具，是 &lt;strong&gt;openGauss-OM（Operation and Maintenance Tool）&lt;/strong&gt; 的重要组成部分。通过 gs_om，运维人员可以便捷地执行集群部署、配置管理、状态监控、故障处理等操作，实现数据库全生命周期的自动化管理。&lt;/p&gt;&#xA;&lt;h3 id=&#34;启动集群-gs_om--t-start&#34;&gt;启动集群 gs_om -t start&lt;/h3&gt;&#xA;&lt;p&gt;解析完命令后调用impl.doStart() 执行命令&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/05/16/fPMCEaHYxw3s9RT.png&#34; alt=&#34;image-20250516204459456&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;接着调用OmImplOLAP.doStartClusterByCm 函数启动集群&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/05/17/hPuJiGtXn8CWBaZ.png&#34; alt=&#34;image-20250517204822380&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;先启动cm&#34;&gt;先启动cm&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/05/18/4LQTdzvociHaWF6.png&#34; alt=&#34;image-20250518173126183&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenGauss 启动集群竟靠删文件？这是什么「逆向操作」</title>
      <link>http://localhost:1313/posts/db/opengauss/opengauss_%E5%90%AF%E5%8A%A8%E9%9B%86%E7%BE%A4%E7%AB%9F%E9%9D%A0%E5%88%A0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/opengauss/opengauss_%E5%90%AF%E5%8A%A8%E9%9B%86%E7%BE%A4%E7%AB%9F%E9%9D%A0%E5%88%A0%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;h2 id=&#34;集群管理软件介绍&#34;&gt;集群管理软件介绍&lt;/h2&gt;&#xA;&lt;h3 id=&#34;om&#34;&gt;OM&lt;/h3&gt;&#xA;&lt;p&gt;运维管理模块(OperationManager)提供openGauss日常运维、配置管理的管理接口和工具.使用python语言编写,底层调用cm相关命令&lt;/p&gt;&#xA;&lt;h3 id=&#34;cm&#34;&gt;CM&lt;/h3&gt;&#xA;&lt;p&gt;（Cluster Manager）是一款集群资源管理软件。支持自定义资源监控，提供了数据库主备的状态监控、网络通信故障监控、文件系统故障监控、故障自动主备切换等能力。&lt;/p&gt;&#xA;&lt;p&gt;CM由cm_server,cm_agent,cm_ctl组成。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cm_agent是部署在数据库每个主机上，用来启停和监控各个数据库实例进程的数据库管理组件。&lt;/li&gt;&#xA;&lt;li&gt;cm_server是用来进行数据库实例管理和实例仲裁的组件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;cm_ctl是openGauss提供的用来控制数据库实例服务的工具。该工具主要供OM调用，及数据库实例服务自恢复时使用。&lt;/li&gt;&#xA;&lt;li&gt;om_monitor 是OpenGauss 后台守护进程,由crontab 管理,可以自动启动&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;集群启动原理&#34;&gt;集群启动原理&lt;/h2&gt;&#xA;&lt;h3 id=&#34;启动命令&#34;&gt;启动命令&lt;/h3&gt;&#xA;&lt;p&gt;在gs_om -t start 启动集群中,实际最后调用的是cm_ctl  start&lt;/p&gt;&#xA;&lt;h4 id=&#34;cm_ctl--start-源码函数调用&#34;&gt;cm_ctl  start 源码函数调用&lt;/h4&gt;&#xA;&lt;h5 id=&#34;调用do_start&#34;&gt;调用do_start()&lt;/h5&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/05/20/cJZFdzuwxjQerEs.png&#34; alt=&#34;image-20250520210020263&#34;&gt;&lt;/p&gt;&#xA;&lt;h5 id=&#34;调用startwholecluster--启动集群&#34;&gt;调用StartWholeCluster()  启动集群&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; if (g_commandOperationInstanceId == 0 &amp;amp;&amp;amp; g_command_operation_azName == NULL &amp;amp;&amp;amp; g_commandOperationNodeId == 0) &#xD;&#xA; ...&#xD;&#xA; CM_RETURN_IFERR(StartWholeCluster());&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/05/21/hkHyTMsXDpRKx4v.png&#34; alt=&#34;image-20250521213747969&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查 集群的状态 CheckClusterRunningStatus()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;检查状态的核心命令是通过pssh 读取hosts($GAUSSHOME/bin/hosts文件)列表,并发在所有节点执行 cm_ctl check -B cm_agent -T /opt/huawei/install/app/bin/cm_agent  命令&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;启动集群 ,调用 start_cluster()函数&lt;/p&gt;&#xA;&lt;p&gt;start_cluster() 函数的核心原理是通过pssh 在集群每个节点执行rm 命令删除cluster_manual_start 等文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pssh 执行的远程命令&#xD;&#xA;&#xA;source /etc/profile&#xD;&#xA;pssh -i \&#xD;&#xA;  -t 60 \&#xD;&#xA;  -O ConnectTimeout=5 \&#xD;&#xA;  -O ConnectionAttempts=3 \&#xD;&#xA;  -O ServerAliveInterval=15 \&#xD;&#xA;  -O ServerAliveCountMax=3 \&#xD;&#xA;  -h /opt/huawei/install/app/bin/hosts \&#xD;&#xA;  &amp;#34;rm -f /opt/huawei/install/app/bin/cluster_manual_start /opt/huawei/install/app/bin/instance_manual_start_*;&#xD;&#xA;   if [ -f /opt/huawei/install/app/bin/cluster_manual_pause ]; then&#xD;&#xA;     touch /opt/huawei/install/app/bin/cluster_manual_starting;&#xD;&#xA;   fi&amp;#34; &amp;gt; /opt/huawei/install/app/bin/pssh.out&#xD;&#xA;&#xA;if [ $? -ne 0 ]; then&#xD;&#xA;  cat /opt/huawei/install/app/bin/pssh.out&#xD;&#xA;fi&#xD;&#xA;&#xA;rm -f /opt/huawei/install/app/bin/pssh.out&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;删除文件触发启动集群&#34;&gt;删除文件触发启动集群&lt;/h5&gt;&#xA;&lt;p&gt;启动集群是通过删除$GAUSSHOME/bin下的cluster_manual_start文件来实现的&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL DELETE 会真实删除数据吗</title>
      <link>http://localhost:1313/posts/db/postgresql/postgresql-delete-%E4%BC%9A%E7%9C%9F%E5%AE%9E%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%97/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/postgresql-delete-%E4%BC%9A%E7%9C%9F%E5%AE%9E%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%97/</guid>
      <description>&lt;p&gt;为测试逻辑简单，测试表无约束索引等其他附加项。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test=# \d t1&#xA;                           Table &amp;#34;public.t1&amp;#34;&#xA; Column |            Type             | Collation | Nullable | Default &#xA;--------+-----------------------------+-----------+----------+---------&#xA; id     | integer                     |           |          | &#xA; time   | timestamp without time zone |           |          | &#xA;&#xA;&#xA;test=# delete from t1 where id=1;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;找到对应的数据行&#34;&gt;找到对应的数据行&lt;/h2&gt;&#xA;&lt;p&gt;此过程类似select 逻辑，在此不详细展开&lt;/p&gt;&#xA;&lt;h2 id=&#34;删除数据行&#34;&gt;删除数据行&lt;/h2&gt;&#xA;&lt;p&gt;删除数据行的主要操作位于函数 heap_delete 之中。从其步骤可以看出，这里并没有如想象中那样的清除操作。（不妨脑补一下用橡皮擦进行作业的画面，哈哈。）&#xA;&lt;img src=&#34;https://s2.loli.net/2024/09/25/Zu97Ad2eIzCwHBg.png&#34; alt=&#34;delete1&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;事务提交-committransactionvoid&#34;&gt;事务提交 CommitTransaction(void)&lt;/h2&gt;&#xA;&lt;p&gt;事务提交的主要操作如下：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;写入日志确保持久性&#xA;事务提交时首先会写入 xlog 日志和 clog 日志，做到了在写入数据前先写入日志&lt;/li&gt;&#xA;&lt;li&gt;通知其他事务与更新状态&#xA;在这个步骤中，会重置 ProcGlobal 里对应事务的 ID。此时，snapshot 能够立刻得知此事务不再执行中。同时，还会修改 TransamVariables 的最后事务号。由于 snapshot 依赖这个变量，所以在这一步骤中会获取 ProcArrayLock 的独占锁&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/09/25/uTv2Vl1DUoYzs9x.png&#34; alt=&#34;commit1&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;看不到删除数据的原理&#34;&gt;看不到删除数据的原理&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;个人理解难免存在差错偏差，最准确完善的信息应参考源代码&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;在 PostgreSQL 中，进行数据查询时，会首先申请一个 snapshot（快照），它就如同一个神奇的滤镜，能将可被看到的数据反馈给用户，同时把不可见的数据巧妙地隐藏起来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postgresql 数据库 UPDATE 原理 和 HOT 技术</title>
      <link>http://localhost:1313/posts/db/postgresql/postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93-update-%E5%8E%9F%E7%90%86-%E5%92%8C-hot-%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/postgresql-%E6%95%B0%E6%8D%AE%E5%BA%93-update-%E5%8E%9F%E7%90%86-%E5%92%8C-hot-%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h2 id=&#34;测试环境和数据&#34;&gt;测试环境和数据&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test=# \d t1&#xA;                        Table &amp;#34;public.t1&amp;#34;&#xA; Column |          Type          | Collation | Nullable | Default &#xA;--------+------------------------+-----------+----------+---------&#xA; id     | integer                |           |          | &#xA; name   | character varying(100) |           |          | &#xA;Indexes:&#xA;    &amp;#34;idx_t1&amp;#34; btree (id)&#xA;&#xA;test=# select * from t1;&#xA; id | name  &#xA;----+-------&#xA;  1 | test1&#xA;(1 row)&#xA;&#xA;test=# update t1 set name=&amp;#39;test2&amp;#39; where id=1;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;update-执行过程&#34;&gt;UPDATE 执行过程&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读取旧值：首先读取要更新的行的当前值，这个值可能来自磁盘上的表或者数据库缓存。&lt;/li&gt;&#xA;&lt;li&gt;计算新值：根据UPDATE语句中的表达式计算出新的值。&lt;/li&gt;&#xA;&lt;li&gt;更新行：将新值写入到行中，如果是热更新，可能会通过修改行指针等方式进行优化更新；如果不是热更新，可能会创建一个新的行版本并插入到表中，同时更新相关的索引。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/10/18/9YHkBKrVF2CRXWs.png&#34; alt=&#34;update1&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;update的核心逻辑存在于heap_update函数之中。在该函数的注释里有说明（replace a tuple），其作用是替换一个元组。也就是说，postgresql update是一种替换操作,新的元组替换旧的元组。&lt;/p&gt;&#xA;&lt;h3 id=&#34;heap_update-详细操作&#34;&gt;heap_update 详细操作&lt;/h3&gt;&#xA;&lt;h4 id=&#34;update-前期操作&#34;&gt;update 前期操作&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/10/18/AbfyZQziGY2ksoj.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;准备新值&#34;&gt;准备新值&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/10/18/7l8VKmdQwLH6O2r.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postgresql 源码研究之基础备份工具pg_basebackup</title>
      <link>http://localhost:1313/posts/db/postgresql/postgresql-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7pg_basebackup/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/postgresql-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7pg_basebackup/</guid>
      <description>&lt;h2 id=&#34;pg_basebackup介绍&#34;&gt;pg_basebackup介绍&lt;/h2&gt;&#xA;&lt;p&gt;pg_basebackup 是 PostgreSQL 内置的 &lt;strong&gt;物理备份工具&lt;/strong&gt;，用于创建数据库集群的 &lt;strong&gt;一致基础备份&lt;/strong&gt;。它支持 &lt;strong&gt;在线热备份&lt;/strong&gt;（备份时数据库可正常读写），是实现高可用性（如流复制）和灾难恢复的核心工具之一&lt;/p&gt;&#xA;&lt;h3 id=&#34;main函数介绍&#34;&gt;main函数介绍&lt;/h3&gt;&#xA;&lt;p&gt;根据代码分析，&lt;code&gt;main()&lt;/code&gt;函数在pg_basebackup.c中主要完成了以下逻辑步骤：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;初始化处理&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;解析命令行参数&lt;/li&gt;&#xA;&lt;li&gt;设置信号处理&lt;/li&gt;&#xA;&lt;li&gt;初始化全局变量和数据结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;连接数据库&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;建立与PostgreSQL服务器的连接&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;conn = GetConnection();&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;验证服务器版本兼容性&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;备份准备&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;创建或清理目标目录&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;verify_dir_is_empty_or_create(basedir, &amp;amp;made_new_pgdata, &amp;amp;found_existing_pgdata);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;处理表空间映射&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置WAL日志目录&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;执行备份&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据参数选择备份格式(plain/tar)&lt;/li&gt;&#xA;&lt;li&gt;启动后台WAL流接收进程&lt;/li&gt;&#xA;&lt;li&gt;通过流复制协议接收基础备份数据&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关键函数调&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;BaseBackup()&lt;/code&gt; - 核心备份逻辑&lt;/p&gt;&#xA;&lt;p&gt;StartLogStreamer()` - 启动WAL流接收&lt;/p&gt;&#xA;&lt;p&gt;cleanup_directories_atexit()` - 退出时清理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;全量备份&#34;&gt;全量备份&lt;/h3&gt;&#xA;&lt;p&gt;不指定增量备份情况下,默认是全量备份.&lt;/p&gt;&#xA;&lt;h4 id=&#34;主要步骤&#34;&gt;主要步骤&lt;/h4&gt;&#xA;&lt;h5 id=&#34;client-端-basebackup&#34;&gt;client 端 BaseBackup();&lt;/h5&gt;&#xA;&lt;p&gt;▶  通过libpq 发送&amp;quot;BASE_BACKUP&amp;quot; 命令给server&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2025/04/29/29WUvoMy6VFPQ5p.png&#34; alt=&#34;image-20250429161709054&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;▶   对于采用流复制备份单独启动一个进程接收wal日志（数据库在备份期间还存在并发写入的情况）&#x9;&#xA;StartLogStreamer(xlogstart..)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会使用临时物理复制槽位，保证wal在备份期间不丢失&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;zhou=# select slot_name from pg_replication_slots ;&#xA;    slot_name      &#xA;---------------------&#xA;pg_basebackup_19476&#xA;(1 row)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;▶ 循环接收服务端发送过来的备份数据直到结束&#xA;ReceiveArchiveStream(conn, client_compress);&lt;/p&gt;</description>
    </item>
    <item>
      <title>Postgresql数据库单个Page最多存储多少行数据</title>
      <link>http://localhost:1313/posts/db/postgresql/postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E4%B8%AApage%E6%9C%80%E5%A4%9A%E5%AD%98%E5%82%A8%E5%A4%9A%E5%B0%91%E8%A1%8C%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8D%95%E4%B8%AApage%E6%9C%80%E5%A4%9A%E5%AD%98%E5%82%A8%E5%A4%9A%E5%B0%91%E8%A1%8C%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;源码src/include/storage/bufpage.h 定义了一个page的结构如下&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; * +----------------+---------------------------------+&#xA; * | PageHeaderData | linp1 linp2 linp3 ...           |&#xA; * +-----------+----+---------------------------------+&#xA; * | ... linpN |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  |&#xA; * +-----------+--------------------------------------+&#xA; * |&#x9;&#x9;   ^ pd_lower&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  |&#xA; * |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  |&#xA; * |&#x9;&#x9;&#x9; v pd_upper&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  |&#xA; * +-------------+------------------------------------+&#xA; * |&#x9;&#x9;&#x9; | tupleN ...                         |&#xA; * +-------------+------------------+-----------------+&#xA; * |&#x9;   ... tuple3 tuple2 tuple1 | &amp;#34;special space&amp;#34; |&#xA; * +--------------------------------+-----------------+&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;一页面整体结构&#34;&gt;一、页面整体结构&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;页面头部（Page Header，24 字节）页面头部存储元数据，用于描述页面状态和管理数据&lt;/li&gt;&#xA;&lt;li&gt;行指针表（Line Pointer Array）紧接页面头部之后，存储页面中所有元组的位置信息，每个指针占 4 字节&lt;/li&gt;&#xA;&lt;li&gt;数据区域（Data Section）&#xA;存储实际的元组数据，每个元组由 元组头部（Tuple Header 23 个字节） 和 数据内容 组成&lt;/li&gt;&#xA;&lt;li&gt;空闲空间（Free Space）&#xA;位于数据区域末尾，用于新元组的插入或元组更新时的扩展。&#xA;通过 空闲列表（Free List） 管理可用空间，记录未使用的字节范围。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Page（8KB）结构：&#xA;+-------------------+&#xA;| 页面头部（24字节） |&#xA;+-------------------+&#xA;| 行指针表（N×4字节）| 每个指针记录元组的位置和状态&#xA;+-------------------+&#xA;| 数据区域（可变）   | 元组数据（头部+内容），按行指针表顺序存储&#xA;+-------------------+&#xA;| 空闲空间（可变）   | 未使用的字节，由空闲列表管理&#xA;+-------------------+&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;计算最大元组数量&#34;&gt;计算最大元组数量&lt;/h2&gt;&#xA;&lt;p&gt;对于默认8K的page，设最大元组数量为 n，行指针表占用空间为 4 * n 字节，元组数据占用空间为 tuple_size * n 字节。&#xA;因此可得到不等式： &lt;code&gt;24+4n+tuplesize×n≤8192&lt;/code&gt;&#xA;整理该不等式可得：&lt;code&gt;n≤ (8192−24)/(4+tuplesize)&lt;/code&gt;&#xA;想要n越大，则tuplesize 越小，tuplesize 包括tuple头部信息23字节，n最大值得302。这是纯数学的计算，接下来看看代码中的实际规定。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从数据库源码角度解析事务的ACID四大特性</title>
      <link>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8B%E5%8A%A1%E7%9A%84acid%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BA%8B%E5%8A%A1%E7%9A%84acid%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;事务的ACID特性（原子性、一致性、隔离性、持久性）是关系型数据库的核心基石。本文将以&lt;strong&gt;PostgreSQL&lt;/strong&gt;为切入点，通过源码分析和调试示例，深入解读ACID特性在数据库底层的实现机制。我们将以PostgreSQL数据库为例，结合具体的SQL语句和调试过程，带您一窥事务背后的神秘世界。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;一原子性atomicity要么全成功要么全失败&#34;&gt;一、原子性（Atomicity）：要么全成功，要么全失败&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-原理概述&#34;&gt;1.1 原理概述&lt;/h3&gt;&#xA;&lt;p&gt;原子性要求事务中的所有操作要么全部成功提交，要么全部回滚。PostgreSQL通过预写式日志（WAL, Write-Ahead Logging）和回滚段（Undo Log）实现这一特性。事务提交前，所有修改必须先写入WAL日志，确保在崩溃后能通过日志恢复。&lt;/p&gt;&#xA;&lt;h3 id=&#34;12-源码实现&#34;&gt;1.2 源码实现&lt;/h3&gt;&#xA;&lt;p&gt;关键文件：&lt;code&gt;src/backend/access/transam/xact.c&lt;/code&gt;&lt;br&gt;&#xA;核心函数：&lt;code&gt;CommitTransaction()&lt;/code&gt; 和 &lt;code&gt;AbortTransaction()&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;示例sql&#34;&gt;示例SQL：&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; accounts (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id SERIAL &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    balance NUMERIC(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 初始化两个账户，初始余额均为 500&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; accounts (balance) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; accounts (balance) &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;.&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 开启事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BEGIN&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 更新账户余额（模拟转账）&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; accounts &lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; balance &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- 提交事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;COMMIT&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--回滚事务&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROLLBACK&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;调试过程&#34;&gt;调试过程：&lt;/h4&gt;&#xA;&lt;h5 id=&#34;要么全成功&#34;&gt;要么全成功&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在&lt;code&gt;xact.c&lt;/code&gt;中设置断点：&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 源码位置：src/backend/access/transam/xact.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CommitTransaction&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 提交事务前，将所有修改写入WAL日志&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RecordTransactionCommit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;代码运行到提交事务阶段&#xA;&lt;img src=&#34;https://s2.loli.net/2025/06/13/PCfybzAOqBUJ1d9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>从源码看 postgresql 共享内存使用</title>
      <link>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-postgresql-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 16 May 2025 20:44:59 +0800</pubDate>
      <guid>http://localhost:1313/posts/db/postgresql/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-postgresql-%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;共享内存实现方式&#34;&gt;共享内存实现方式&lt;/h2&gt;&#xA;&lt;p&gt;源码中可见Postgres 共享内存实现方式有 3 中，默认使用的 MMAP 内存映射方式&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef enum&#xA;{&#xA;&#x9;SHMEM_TYPE_WINDOWS,&#xA;&#x9;SHMEM_TYPE_SYSV,&#xA;&#x9;SHMEM_TYPE_MMAP,&#xA;}&#x9;PGShmemType;&#xA;&#xA;#define DEFAULT_SHARED_MEMORY_TYPE SHMEM_TYPE_MMAP&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;共享内存组成部分和大小&#34;&gt;共享内存组成部分和大小&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源码文件 backend/storage/ipc/ipci.c&#xA;源码函数 CalculateShmemSize(int *num_semaphores)&#xA;&#xA;整体组成部分有下面这么多，其中最大的部分是BufferShmemSize，就是数据库参数shared_buffers 参数对应的部分。&#xA;&#xA;  size = add_size(size, PGSemaphoreShmemSize(numSemas));&#xA;&#x9;size = add_size(size, SpinlockSemaSize());&#xA;&#x9;size = add_size(size, hash_estimate_size(SHMEM_INDEX_SIZE,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; sizeof(ShmemIndexEnt)));&#xA;&#x9;size = add_size(size, dsm_estimate_size());&#xA;&#x9;size = add_size(size, DSMRegistryShmemSize());&#xA;&#x9;size = add_size(size, BufferShmemSize());&#xA;&#x9;size = add_size(size, LockShmemSize());&#xA;&#x9;size = add_size(size, PredicateLockShmemSize());&#xA;&#x9;size = add_size(size, ProcGlobalShmemSize());&#xA;&#x9;size = add_size(size, XLogPrefetchShmemSize());&#xA;&#x9;size = add_size(size, VarsupShmemSize());&#xA;&#x9;size = add_size(size, XLOGShmemSize());&#xA;&#x9;size = add_size(size, XLogRecoveryShmemSize());&#xA;&#x9;size = add_size(size, CLOGShmemSize());&#xA;&#x9;size = add_size(size, CommitTsShmemSize());&#xA;&#x9;size = add_size(size, SUBTRANSShmemSize());&#xA;&#x9;size = add_size(size, TwoPhaseShmemSize());&#xA;&#x9;size = add_size(size, BackgroundWorkerShmemSize());&#xA;&#x9;size = add_size(size, MultiXactShmemSize());&#xA;&#x9;size = add_size(size, LWLockShmemSize());&#xA;&#x9;size = add_size(size, ProcArrayShmemSize());&#xA;&#x9;size = add_size(size, BackendStatusShmemSize());&#xA;&#x9;size = add_size(size, SInvalShmemSize());&#xA;&#x9;size = add_size(size, PMSignalShmemSize());&#xA;&#x9;size = add_size(size, ProcSignalShmemSize());&#xA;&#x9;size = add_size(size, CheckpointerShmemSize());&#xA;&#x9;size = add_size(size, AutoVacuumShmemSize());&#xA;&#x9;size = add_size(size, ReplicationSlotsShmemSize());&#xA;&#x9;size = add_size(size, ReplicationOriginShmemSize());&#xA;&#x9;size = add_size(size, WalSndShmemSize());&#xA;&#x9;size = add_size(size, WalRcvShmemSize());&#xA;&#x9;size = add_size(size, WalSummarizerShmemSize());&#xA;&#x9;size = add_size(size, PgArchShmemSize());&#xA;&#x9;size = add_size(size, ApplyLauncherShmemSize());&#xA;&#x9;size = add_size(size, BTreeShmemSize());&#xA;&#x9;size = add_size(size, SyncScanShmemSize());&#xA;&#x9;size = add_size(size, AsyncShmemSize());&#xA;&#x9;size = add_size(size, StatsShmemSize());&#xA;&#x9;size = add_size(size, WaitEventExtensionShmemSize());&#xA;&#x9;size = add_size(size, InjectionPointShmemSize());&#xA;&#x9;size = add_size(size, SlotSyncShmemSize());&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;共享内存创建&#34;&gt;共享内存创建&lt;/h2&gt;&#xA;&lt;p&gt;在刚创建初期，共享内存结构很简单，如下图。&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;h1 id=&#34;关于我&#34;&gt;关于我&lt;/h1&gt;&#xA;&lt;p&gt;一个从事国产数据库的，星光赶路人&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contact/</guid>
      <description>&lt;h2 id=&#34;联系我&#34;&gt;联系我&lt;/h2&gt;&#xA;&lt;p&gt;欢迎通过以下方式与我交流：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;邮箱: &lt;a href=&#34;mailto:maozicb@163.com&#34;&gt;maozicb@163.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;期待您的来信！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
